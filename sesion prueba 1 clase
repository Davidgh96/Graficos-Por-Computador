#include <GL/glew.h>
#include <GL/freeglut.h>
#include <stdio.h>
#include <valarray>

void initFunc();
void funReshape(int w, int h);
void funDisplay();


void BrazoRojo();
void BrazoAzul();
void BrazoVerde();
void ArticuacionVerde();
void ArticulacionAzul();
void ejes();
void base();
using namespace std;

// Variables globales
int w = 600;
int h = 600;


int main(int argc, char** argv) {

 // Inicializamos GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(w,h);
    glutInitWindowPosition(50,50);
    glutCreateWindow("Sesion 4");
    
 // Inicializamos GLEW
    GLenum err = glewInit();
    if(GLEW_OK != err) printf("Error: %s\n", glewGetErrorString(err));
    printf("Status: Using GLEW %s\n", glewGetString(GLEW_VERSION));
    const GLubyte *oglVersion = glGetString(GL_VERSION);
    printf("This system supports OpenGL Version: %s\n", oglVersion);
    
 // Inicializaciones específicas
    initFunc();
    
 // Configuración CallBacks
    glutReshapeFunc(funReshape);
    glutDisplayFunc(funDisplay);
   
    
 // Bucle principal
    glutMainLoop();
    
    return 0;
}

void initFunc() {
   
 // Test de profundidad
    glEnable(GL_DEPTH_TEST);
    glPolygonOffset(1.0,1.0);
 // Modelo de sombreado
    glShadeModel(GL_FLAT);
       

 

}

void funReshape(int wnew, int hnew) {
    
 // Configuración del Viewport
    glViewport(0, 0, w, h);

 // Captura de w y h
  
    
}

void funDisplay() {
    
 // Borramos el buffer de color
    glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
 // Para configurar la matriz matriz P
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    
 // Matriz de Proyección P (Cámara)
    GLfloat fovy = 60.0f, aspectRatio = (GLfloat)w/(GLfloat)h, nplane = 0.1f, fplane = 20.0f;
    gluPerspective(fovy,aspectRatio,nplane,fplane);
    
 // Para configurar las matrices M y V
    glMatrixMode(GL_MODELVIEW);  
    glLoadIdentity();
    
 // Matriz de Vista V (Cámara)
    GLfloat eye[3]    = {-3.0,  2.0,  3.0};
    GLfloat center[3] = {0.0,  0.0, 0.0};
    GLfloat up[3]     = {0.0,  1.0,  0.0};
    gluLookAt(    eye[0],    eye[1],    eye[2],
               center[0], center[1], center[2],
                   up[0],     up[1],     up[2]); 

 // Dibujamos los objetos (M)
    ejes();
    
    glTranslatef(0.0f, 0.0f, 1.0f);
    glRotatef(-90, 0.0f, 1.0f, 0.0f);
   
    base();
    glTranslatef(0.0,0.4,0.0);
    ArticulacionAzul();
    BrazoAzul();
    ArticuacionVerde();
    BrazoVerde();
    BrazoRojo();
    
    
   
    
 // Intercambiamos los buffers
    glutSwapBuffers();
    
}
void BrazoAzul(){
    glPushMatrix();
    glTranslatef(0.0,0.0,0.2);
     glColor3f(1.0, 1.0, 1.0);
    glutWireCylinder(0.1,1.0,20,10);
    glEnable(GL_POLYGON_OFFSET_FILL);
         glColor3f(0.0, 0.0, 1.0);
         glutSolidCylinder(0.1,1.0,20,10);
      glDisable(GL_POLYGON_OFFSET_FILL);
      glPopMatrix();
}
void BrazoVerde(){
    glPushMatrix();
    glTranslatef(0.0,0.0,1.35);

     glColor3f(1.0, 1.0, 1.0);
    glutWireCylinder(0.075,0.7,20,10);
    glEnable(GL_POLYGON_OFFSET_FILL);
         glColor3f(0.0, 1.0, 0.0);
         glutSolidCylinder(0.075,0.7,20,10);
      glDisable(GL_POLYGON_OFFSET_FILL);
      glPopMatrix();
    
}
void BrazoRojo(){
    glPushMatrix();
    glTranslatef(0.0,0.0,2.05);
     glColor3f(1.0, 1.0, 1.0);
    glutWireCylinder(0.05,0.5,20,10);
    glEnable(GL_POLYGON_OFFSET_FILL);
         glColor3f(1.0, 0.0, 0.0);
         glutSolidCylinder(0.05,0.5,20,10);
      glDisable(GL_POLYGON_OFFSET_FILL);
    
    glPopMatrix();
    
}
void ArticuacionVerde(){
     glPushMatrix();
     glTranslatef(0.0,0.0,1.2);
      glColor3f(1.0, 1.0, 1.0);
    glutWireSphere(0.15,20,20);
    glEnable(GL_POLYGON_OFFSET_FILL);
         glColor3f(0.0, 1.0, 0.0);
         glutSolidSphere(0.15,20,20);
      glDisable(GL_POLYGON_OFFSET_FILL);
   glPopMatrix();
}
void ArticulacionAzul(){
    
   glPushMatrix();
    glColor3f(1.0, 1.0, 1.0);
    glutWireSphere(0.2,20,20);
    glEnable(GL_POLYGON_OFFSET_FILL);
         glColor3f(0.0, 0.0, 1.0);
         glutSolidSphere(0.2,20,20);
      glDisable(GL_POLYGON_OFFSET_FILL);
   glPopMatrix();
}
void base(){
       glPushMatrix(); 
       glTranslatef(0.0,0.2,0.0);
       glRotated(90,1.0,0.0,0.0);
     glColor3f(1.0, 1.0, 1.0);
    glutWireCylinder(0.5,0.2,100,5);
    glEnable(GL_POLYGON_OFFSET_FILL);
         glColor3f(0.5, 0.5, 0.5);
        glutSolidCylinder(0.5,0.2,100,5);
      glDisable(GL_POLYGON_OFFSET_FILL);
    
    glPopMatrix();
    
}

void ejes(){
    glPushMatrix(); 
    glEnable (GL_LINE_STIPPLE);
    
        glLineStipple(1,255);
        glLineWidth(2);
        glColor3f(0.5,0.5,0.5);
       
    glBegin(GL_LINES);
    glVertex3i(-10,0,0);
    glVertex3i(10,0,0);
    
    glVertex3i(0,-10,0);
    glVertex3i(0,10,0);
    
    glVertex3i(0,0,-20);
    glVertex3i(0,0,20);
     
    glEnd();
    glLineWidth(1);
    glDisable (GL_LINE_STIPPLE);
    glPopMatrix();
}
