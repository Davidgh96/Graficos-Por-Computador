
//#include <GL/glew.h>
//#include <GL/freeglut.h>
//#include <stdio.h>
//#include <valarray>
// #include <math.h>
//
//void initFunc();
//void funReshape(int w, int h);
//void funDisplay();
//void funKeyboard(unsigned char key, int x, int y);
//void funKeyboardSpecial(int key, int x, int y);
//void funIdle();
//void funMouse(int button, int state, int x, int y);
//void funTimer(int ignore);
//void funMotion(int x, int y);
//
//void BrazoRojo();
//void BrazoAzul();
//void BrazoVerde();
//void ArticuacionVerde();
//void ArticulacionAzul();
//void ejes();
//void base();
//void dedos();
//void dedo();
//void mano();
//using namespace std;
//
//// Variables globales
//int w = 600;
//int h = 600;
//GLfloat desZ=1.0;
//GLfloat rotY=0.0;
//GLfloat rotX=0.0;
//GLfloat rotXAzul=0.0;
//GLfloat  rotMano=0.0;
//GLfloat rojo=0.0;
//GLfloat newX=0.0;
//GLfloat newY=0.0;
//GLfloat speed=30;
//GLboolean leftbutton=false;
//GLfloat zoom=1.0;
//
//
//
//int main(int argc, char** argv) {
//
// // Inicializamos GLUT
//    glutInit(&argc, argv);
//    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
//    glutInitWindowSize(w,h);
//    glutInitWindowPosition(50,50);
//    glutCreateWindow("Sesion 4");
//    
// // Inicializamos GLEW
//    GLenum err = glewInit();
//    if(GLEW_OK != err) printf("Error: %s\n", glewGetErrorString(err));
//    printf("Status: Using GLEW %s\n", glewGetString(GLEW_VERSION));
//    const GLubyte *oglVersion = glGetString(GL_VERSION);
//    printf("This system supports OpenGL Version: %s\n", oglVersion);
//    
// // Inicializaciones especÃ­ficas
//    initFunc();
//    
// // ConfiguraciÃ³n CallBacks
//    glutReshapeFunc(funReshape);
//    glutDisplayFunc(funDisplay);
//    glutKeyboardFunc(funKeyboard);
//    glutMouseFunc(funMouse);
//    glutMotionFunc(funMotion);
//    glutTimerFunc(speed,funTimer,0);
//    glutIdleFunc(funIdle);
//    glutSpecialFunc(funKeyboardSpecial);
//    
//   
//    
// // Bucle principal
//    glutMainLoop();
//    
//    return 0;
//}
//
//void initFunc() {
//   
// // Test de profundidad
//    glEnable(GL_DEPTH_TEST);
//    glPolygonOffset(1.0,1.0);
//    glEnable(GL_POLYGON_OFFSET_FILL);
// // Modelo de sombreado
//    glShadeModel(GL_FLAT);
//       
//
// 
//
//}
//
//void funReshape(int wnew, int hnew) {
//    
//// Configuración del Viewport
//    glViewport(0, 0, wnew, hnew);
//
// // Captura de w y h
//    w = wnew;
//    h = hnew;
//  
//    
//}
//
//void funDisplay() {
//    
// // Borramos el buffer de color
//    glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
//    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
//    
// // Para configurar la matriz matriz P
//    glMatrixMode(GL_PROJECTION);
//    glLoadIdentity();
//    
// // Matriz de ProyecciÃ³n P (CÃ¡mara)
//    GLfloat fovy = 60.0f, aspectRatio = (GLfloat)w/(GLfloat)h, nplane = 0.1f, fplane = 20.0f;
//    gluPerspective(fovy*zoom,aspectRatio,nplane,fplane);
//    
// // Para configurar las matrices M y V
//    glMatrixMode(GL_MODELVIEW);  
//    glLoadIdentity();
//    
// // Matriz de Vista V (CÃ¡mara)
//    GLfloat eye[3] = {3.0*sin(newX*M_PI/180.0f), 3.0*sin(newY*M_PI/180.0f), 3.0f};
//    GLfloat center[3] = {0.0,  0.0, 0.0};
//    GLfloat up[3]     = {0.0,  1.0,  0.0};
//   
//    gluLookAt(    eye[0],    eye[1],    eye[2],
//               center[0], center[1], center[2],
//                   up[0],     up[1],     up[2]); 
//
// // Dibujamos los objetos (M)
//    ejes();
//    base();
// // Intercambiamos los buffers
//    glutSwapBuffers();
//    
//}
//void dedo(){
//    glPushMatrix();
//    glTranslatef(0.0,-0.15+0.02,0.05);
//    glColor3f(1.0, 1.0, 1.0);
//    glutWireCylinder(0.02,0.15,10,4);
//    glColor3f(1.0, 0.0, 0.0);
//    glutSolidCylinder(0.02,0.15,10,4);
//    glPopMatrix();
//}
//void dedos(){
//  
//    glRotatef(0.0,0.0,0.0,1.0);dedo();
//    glRotatef(90.0,0.0,0.0,1.0);dedo();
//    glRotatef(90.0,0.0,0.0,1.0);dedo();
//    glRotatef(90.0,0.0,0.0,1.0);dedo();
//    
//    
//}
//void mano(){
//      glColor3f(1.0, 1.0, 1.0);
//     glutWireCylinder(0.15,0.05,20,2);
//    glColor3f(0.0, 0.5, 0.0);
//     glutSolidCylinder(0.15,0.05,20,2);
//     dedos();
//    
//}
//
//void BrazoAzul(){
//
//    glColor3f(1.0, 1.0, 1.0);
//    glutWireCylinder(0.1,1.0,20,10);
//    glColor3f(0.0, 0.0, 1.0);
//    glutSolidCylinder(0.1,1.0,20,10);
//    glTranslatef(0.0,0.0,1.0);
//    ArticuacionVerde();
//
//
//}
//void BrazoVerde(){
//
//    
//
//    glColor3f(1.0, 1.0, 1.0);
//    glutWireCylinder(0.075,0.7,20,10);
//    glColor3f(0.0, 1.0, 0.0);
//    glutSolidCylinder(0.075,0.7,20,10);
//    
//    glTranslatef(0.0,0.0,0.7);
//    BrazoRojo();
//    
//
//    
//}
//void BrazoRojo(){
//   glTranslatef(0.0,0.0,rojo);
//   glColor3f(1.0, 1.0, 1.0);
//   glutWireCylinder(0.05,0.5,20,10);
//   glColor3f(1.0, 0.0, 0.0);
//   glutSolidCylinder(0.05,0.5,20,10);
//   glTranslatef(0.0,0.0,0.5);
//   glRotatef(rotMano,0.0,0.0,1.0);
//   mano();
//    
// 
//    
//}
//void ArticuacionVerde(){
//
//    glRotatef(rotX,1.0,0.0,0.0);
//    glColor3f(1.0, 1.0, 1.0);
//    glutWireSphere(0.15,20,20);
//    glColor3f(0.0, 1.0, 0.0);
//    glutSolidSphere(0.15,20,20);
//    BrazoVerde();
//
//
//}
//void ArticulacionAzul(){
//    
//    glRotatef(rotXAzul,1.0,0.0,0.0);
//    glColor3f(1.0, 1.0, 1.0);
//    glutWireSphere(0.2,20,20);
//    glColor3f(0.0, 0.0, 1.0);
//    glutSolidSphere(0.2,20,20);
//    BrazoAzul();
//
//
//}
//void base(){
//    glRotatef(rotY,0.0,1.0,0.0);
//   glPushMatrix(); 
//    glTranslatef(0.0,0.2,0.0);
//    glRotated(90,1.0,0.0,0.0);
//    glColor3f(1.0, 1.0, 1.0);
//    glutWireCylinder(0.5,0.2,100,5);   
//    glColor3f(0.5, 0.5, 0.5);
//    glutSolidCylinder(0.5,0.2,100,5);   
//   glPopMatrix();
//    
//    glTranslatef(0.0,0.4,0.0);
//    ArticulacionAzul();
//    
//}
//
//void ejes(){
//    glPushMatrix(); 
//    glEnable (GL_LINE_STIPPLE);
//    
//        glLineStipple(1,255);
//        glLineWidth(2);
//        glColor3f(0.5,0.5,0.5);
//       
//    glBegin(GL_LINES);
//    glVertex3i(-10,0,0);
//    glVertex3i(10,0,0);
//    
//    glVertex3i(0,-10,0);
//    glVertex3i(0,10,0);
//    
//    glVertex3i(0,0,-20);
//    glVertex3i(0,0,20);
//     
//    glEnd();
//    glLineWidth(1);
//    glDisable (GL_LINE_STIPPLE);
//    glPopMatrix();
//}
//void funKeyboard(unsigned char key, int x, int y) {
//   
//    switch(key) {
//        case 'd':
//            if(rojo>=-0.5){
//                rojo-=0.01f;
//            }
//                break;
//        case 'D':
//            if(rojo<=0.0){
//                rojo+=0.01f;
//            }
//            break;        
//        case 'r':rotY+=5.0f;break;
//        case 'R':rotY-=5.0f;break;
//       
//        default:
//            ;  
//            
//     }
//    
//    
//    
//    glutPostRedisplay();
//        
//}
//void funKeyboardSpecial(int key, int x, int y){
//    switch(key) {
//
//        case GLUT_KEY_UP:
//            if(rotXAzul>=-180){
//            rotXAzul -= 5.0f;
//            }
//            break;
//        case GLUT_KEY_DOWN:
//            if(rotXAzul<=0){
//            rotXAzul += 5.0f;
//            }
//            break;
//        case GLUT_KEY_LEFT:
//            if(rotX>=-130){
//            rotX -= 5.0f;
//            }
//            break;
//        case GLUT_KEY_RIGHT:
//            if(rotX<=130){
//            rotX += 5.0f;
//            }
//            break;
//        default:
//            ;  
//            
//     }
//    
//    
//    
//    glutPostRedisplay();
//    
//}
//void funMouse(int button, int state, int x, int y){
//   leftbutton =button == GLUT_LEFT_BUTTON && state ==GLUT_DOWN;
//   switch(button){
//       case 3: zoom -=zoom >0.5 ?0.05:0.0;break;
//       case 4: zoom +=zoom<1.5 ? 0.05 :0.0;break;
//   }
//   
//    
//}
//void funMotion(int x, int y){
//    if(leftbutton){
//        newX=(GLfloat)(w/2- x);
//        newY =(GLfloat)(y-h/2);
//        if(newX>300.0)newX=300.0;
//         if(newY>300.0)newY=300.0;
//         if(newX<-300.0)newX=-300.0;
//         if(newX<-300.0)newY=-300.0;
//        newX/=5.0;
//        newY/=5.0;
//        glutPostRedisplay();
//    }
//    
//}
//void funTimer(int ignore){
//    rotMano-=5.0;
//    glutPostRedisplay();
//    glutTimerFunc(speed,funTimer,0);
//}
//void funIdle() {
//   
//}
